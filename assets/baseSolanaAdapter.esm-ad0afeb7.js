import{L as h,M as g,C as l,v as m,D as a,N as f,Q as p,R as u,T as w,U as E,V as T,x as A}from"./index-33dc9532.js";import{b as C}from"./solanaProvider.esm-20950b9a.js";class I extends h{async init(e){this.chainConfig||(this.chainConfig=g(l.SOLANA,1))}async authenticateUser(){if(!this.provider||this.status!==m.CONNECTED)throw a.notConnectedError();const{chainNamespace:e,chainId:o}=this.chainConfig,s=await this.provider.request({method:"getAccounts"});if(s&&s.length>0){const n=f(s[0],this.name);if(n&&!p(n))return{idToken:n};const c={domain:window.location.origin,uri:window.location.href,address:s[0],chainId:parseInt(o,16),version:"1",nonce:Math.random().toString(36).slice(2),issuedAt:new Date().toISOString()},t=await u(c,e),r=new TextEncoder().encode(t),d=await this.provider.request({method:"signMessage",params:{message:r,display:"utf8"}}),i=await w(e,C.encode(d),t,this.name,this.sessionTime,this.clientId,this.web3AuthNetwork);return E(s[0],this.name,i),{idToken:i}}throw a.notConnectedError("Not connected with wallet, Please login/connect first")}async disconnectSession(){super.checkDisconnectionRequirements();const e=await this.provider.request({method:"getAccounts"});e&&e.length>0&&T(e[0],this.name)}async disconnect(){this.rehydrated=!1,this.emit(A.DISCONNECTED)}}export{I as B};
